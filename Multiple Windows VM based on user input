# Configure the Azure provider
terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.0.2"
    }
  }

  required_version = ">= 1.1.0"
}

provider "azurerm" {
  features {}
}

# Get input from user for number of VMs to launch
variable "vm_count" {
  description = "How many VMs do you want to launch? (Enter a value between 1 to 19)"
  type        = number

  # Validation to ensure at least 1 VM and no more than 20 (Azure quota limits)
  validation {
    condition     = var.vm_count > 0 && var.vm_count <= 20
    error_message = "The number of VMs must be between 1 and 20."
  }
}

# Create a resource group
resource "azurerm_resource_group" "example" {
  name     = "windows-vm-rg-${formatdate("YYYYMMDDhhmmss", timestamp())}"
  location = "East US"
}

# Create a virtual network
resource "azurerm_virtual_network" "example" {
  name                = "windows-vm-vnet"
  address_space       = ["10.0.0.0/16"]
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name
}

# Create a subnet
resource "azurerm_subnet" "example" {
  name                 = "windows-vm-subnet"
  resource_group_name  = azurerm_resource_group.example.name
  virtual_network_name = azurerm_virtual_network.example.name
  address_prefixes     = ["10.0.1.0/24"]
}

# Create a public IP for each VM
resource "azurerm_public_ip" "example" {
  count               = var.vm_count
  name                = "windows-vm-pip-${count.index}"
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name
  allocation_method   = "Dynamic"
}

# Create a network interface for each VM
resource "azurerm_network_interface" "example" {
  count               = var.vm_count
  name                = "windows-vm-nic-${count.index}"
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.example.id
    private_ip_address_allocation = "Dynamic"
    public_ip_address_id          = azurerm_public_ip.example[count.index].id
  }
}

# Generate a random password for the VMs
resource "random_password" "vm_password" {
  length           = 16
  special          = true
  override_special = "!#$%&*()-_=+[]{}<>:?"
}

# Create a Windows virtual machine for each count
resource "azurerm_windows_virtual_machine" "example" {
  count               = var.vm_count
  name                = "winvm-${count.index}"
  resource_group_name = azurerm_resource_group.example.name
  location            = azurerm_resource_group.example.location
  size                = "Standard_D2s_v3"
  admin_username      = "adminuser"
  admin_password      = random_password.vm_password.result
  network_interface_ids = [
    azurerm_network_interface.example[count.index].id,
  ]

  os_disk {
    caching              = "ReadWrite"
    storage_account_type = "Standard_LRS"
  }

  source_image_reference {
    publisher = "MicrosoftWindowsServer"
    offer     = "WindowsServer"
    sku       = "2019-Datacenter"
    version   = "latest"
  }

  tags = {
    environment = "demo"
    created-by  = "terraform"
  }
}

# Output the VM names
output "vm_names" {
  description = "Names of the created VMs are :-"
  value       = azurerm_windows_virtual_machine.example[*].name
}
